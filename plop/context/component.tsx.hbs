import { createContext, useCallback, useContext, useMemo, useState } from 'react';
import { {{pascalCase name}}ProviderProps, {{pascalCase name}}Type } from './{{pascalCase name}}.types';

const {{pascalCase name}} = createContext<{{pascalCase name}}Type>({
  value: 0,
  increment: () => {},
  decrement: () => {},
});

export function {{pascalCase name}}Provider({ children }: {{pascalCase name}}ProviderProps) {
  const [value, setValue] = useState(0);

  const increment = useCallback(() => {
    setValue(value + 1);
  }, [value]);

  const decrement = useCallback(() => {
    setValue(value - 1);
  }, [value]);

  const contextValue = useMemo<{{pascalCase name}}Type>(
    () => ({
      value,
      increment,
      decrement,
    }),
    [decrement, increment, value],
  );

  return <{{pascalCase name}}.Provider value={contextValue}>{children}</{{pascalCase name}}.Provider>;
}

export function use{{pascalCase name}}() {
  const context = useContext({{pascalCase name}});
  if (context === undefined) {
    throw new Error('use{{pascalCase name}} must be used within a {{pascalCase name}}Provider');
  }
  return context;
}
